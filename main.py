
import base64
from Crypto.Cipher import AES

def pad(data):
    padding_length = 16 - (len(data) % 16)
    return data + (chr(padding_length) * padding_length).encode()

def unpad(data):
    return data[:-data[-1]]

encrypted_data = base64.b64decode("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")
key = bytes.fromhex("f4fc8f2d9851dd512926b6974eed9499")
iv = encrypted_data[:16]
cipher = AES.new(key, AES.MODE_CBC, iv)
original_data = unpad(cipher.decrypt(encrypted_data[16:]))
exec(original_data.decode())
                
