
import base64
from Crypto.Cipher import AES

def pad(data):
    padding_length = 16 - (len(data) % 16)
    return data + (chr(padding_length) * padding_length).encode()

def unpad(data):
    return data[:-data[-1]]

encrypted_data = base64.b64decode("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")
key = bytes.fromhex("a8203693f3433a150889f647636f5c43")
iv = encrypted_data[:16]
cipher = AES.new(key, AES.MODE_CBC, iv)
original_data = unpad(cipher.decrypt(encrypted_data[16:]))
exec(original_data.decode())
                